# ---------------------------------------------------------------------------------------------------------------------
# This python file plots the Epochs, Accuracy and Average Loss of the train model which is the output generated
# by the nn.c file.
#
# Pre-requisite before running this file:
# Before running this file make sure nn.c output is generated.
# Create a .txt file naming training_log.txt and copy and paste the Epoch, Accuracy and Average loss generated by nn.c
#
# How to run this plot.py python file?
# command to used:
# python -m venv .venv              # Create a virtual environment if needed
# source .venv/Scripts/activate     # Activate the virtual environment
# pip install matplotlib            # Install matplotlib library for ploting
# python plot.py                    # To run the plot.py file
#
# What is the output of this plot.py file?
# It create a matplotlib plot for Epochs, Accuracy and Average Loss of the train model and also saves the same
# in the local same directory structure with name as training_plot.png.
# The orange line in matplotlib plot represents Average loss based on Epochs
# The blue line in matplotlib plot represents Accuracy in percentage(%) based on Epochs
# ---------------------------------------------------------------------------------------------------------------------

import matplotlib.pyplot as plt

# Initialize lists to store data
epochs = []
accuracies = []
avg_losses = []

# Read data from the .txt file which can be copy and pasted from the output generated by nn.c
with open('training_log.txt', 'r') as file:
    for line in file:
        parts = line.strip().split(',')
        epoch_part = parts[0].split()[1]  # Get the epoch number
        accuracy_part = parts[1].split(':')[1].strip().replace('%', '')  # Get the accuracy
        loss_part = parts[2].split(':')[1].strip()  # Get the avg loss
        
        epochs.append(int(epoch_part))
        accuracies.append(float(accuracy_part))
        avg_losses.append(float(loss_part))

# Create the combined plot
fig, ax1 = plt.subplots(figsize=(10, 6))

# Plot Accuracy
color = 'tab:blue'
ax1.set_xlabel('Epochs')
ax1.set_ylabel('Accuracy (%)', color=color)
ax1.plot(epochs, accuracies, marker='o', label='Accuracy', color=color)
ax1.tick_params(axis='y', labelcolor=color)
ax1.set_ylim(95, 99)


# Create a second y-axis for average loss
ax2 = ax1.twinx()  
color = 'tab:orange'
ax2.set_ylabel('Avg Loss', color=color)
ax2.plot(epochs, avg_losses, marker='o', label='Avg Loss', color=color)
ax2.tick_params(axis='y', labelcolor=color)
ax2.set_ylim(0, 0.25)

# Title and grid
plt.title('Training Accuracy and Average Loss')
ax1.grid()

# Show the plot
plt.tight_layout()
plt.savefig('training_plot.png')
plt.show()
